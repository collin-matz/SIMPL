// str_concat
// Input: Memory Address, Memory Address
// Output: Memory Address
// Description: Allocates a new string and concatenates the input strings into the new string.  Places the
//              memory address of the new string on the stack.

// get the length of the two input strings to MALLOC the new string on the heap

// DUP the two memory addresses
                PUSHOFF 0
                PUSHOFF 1

// len of string 1
                PUSHIMM 0           // initialize the str len value  
                PUSHOFF 2           // move the memory address to TOS so we can PUSHIND the value                  
next_ch_1:      PUSHIND             // push the data at that memory address to the stack
                PUSHIMMCH '\0'      // push a null terminator for comparison to the data
                EQUAL               // push their equality value to the stack
                JUMPC next_str      // if they are equal, jump to the exit

                PUSHIMM 1           // if they are not equal, increment the str len by 1
                ADD                 
                PUSHOFF 2           // increment the addr by 1    
                PUSHIMM 1
                ADD
                STOREOFF 2          // overwrite the old memory addr by the incremented val
                PUSHOFF 2
                JUMP next_ch_1      // go to the next character iteration

// len of string 2
next_str:     
                PUSHIMM 0           // initialize the str len value  
                PUSHOFF 0           // move the memory address to TOS so we can PUSHIND the value                  
next_ch_2:      PUSHIND             // push the data at that memory address to the stack
                PUSHIMMCH '\0'      // push a null terminator for comparison to the data
                EQUAL               // push their equality value to the stack
                JUMPC malloc        // if they are equal, jump to the exit

                PUSHIMM 1           // if they are not equal, increment the str len by 1
                ADD                 
                PUSHOFF 3           // increment the addr by 1    
                PUSHIMM 1
                ADD
                STOREOFF 3          // overwrite the old memory addr by the incremented val
                PUSHOFF 3
                JUMP next_ch_2      // go to the next character iteration

malloc:         ADD                 // add the two lengths together
                PUSHIMM 1
                ADD
                MALLOC              // allocate heap memory that is the size of the two strings +1
                DUP

// now that the space exists, we go back through each string
// and set each memory location
                PUSHOFF 0           // move the memory address to TOS so we can PUSHIND the value                  
next_ch_3:      PUSHIND             // push the data at that memory address to the stack
                DUP
                PUSHIMMCH '\0'      // push a null terminator for comparison to the data
                EQUAL               // push their equality value to the stack
                JUMPC next_str_2    // if they are equal, jump to the exit

                PUSHOFF 5
                SWAP
                STOREIND            // increment the addr by 1    
                PUSHIMM 1
                ADD
                PUSHOFF 0
                PUSHIMM 1
                ADD
                STOREOFF 0
                PUSHOFF 0
                JUMP next_ch_3      // go to the next character iteration

next_str_2:
                ADDSP -1
                PUSHOFF 1           // move the memory address to TOS so we can PUSHIND the value                  
next_ch_4:      PUSHIND             // push the data at that memory address to the stack
                DUP
                PUSHIMMCH '\0'      // push a null terminator for comparison to the data
                EQUAL               // push their equality value to the stack
                JUMPC exit          // if they are equal, jump to the exit

                PUSHOFF 5
                SWAP
                STOREIND            // increment the addr by 1    
                PUSHIMM 1
                ADD
                PUSHOFF 1
                PUSHIMM 1
                ADD
                STOREOFF 1
                PUSHOFF 1
                JUMP next_ch_4      // go to the next character iteration

exit:
                PUSHOFF 5
                SWAP
                STOREIND            // push the null terminator to the heap
                ADDSP -1
                STOREOFF 0
                ADDSP -3
